
First of all, the discussion was very helpful in
helping me to learn the basics of Ocaml. 

Here are the reflections on each questions:

(1) I use the recursion, and
test whether the head of the first list (if not empty) is a 
member of the second list. 

(2) I called the first 
function twice to implement this function. 

(3) I check whether the head of the 
first list (if not empty) is a member of the second list. Put
This element in the second list if not. Use recursion to traverse
The first list. 

(4) I used the idea of recursion again.
Notice that the set_all_union is essentially the head set
(if the list is not empty) concatenated with the remaining sets.

(5) I noticed that List.mem s s, where s is the parameter,
 would be an error in Ocaml, as it would do type inference, and if
the first s is of type 'a, the second s should be of type 'a list,
and 'a is incompatible with tpye 'a list, which leads to an error.

(6) Reading the sample 
tests helped me understand the question and solve it. Essentially,
it would be a recursion, and test whether (eq) x (f x) is true each time.

(7) The last question was more difficult for me comparing to the first 6 
questions.  I met two difficulties 
when solving this question. The first was when I wanted to check the type 
of a symbol. Ocaml has no built-in type checking functions, and after 
research and trials, I learnt that the type checking can be done through
pattern matching of each element in the list. The second obstacle was that 
the computed_fixed_point did not fir into the scenario well. I wanted to 
find a fixed point of y in the tuple (x, y), with x unchanged each time.
To solve this problem, I rewrote the computed_fixed_point function and mangaged
to meet this requirement.

I notice that my implementation of question 7 was complicated. If 
I have more time, I would like to simplify my implementation.

